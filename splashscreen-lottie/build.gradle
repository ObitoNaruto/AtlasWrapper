apply plugin: 'com.android.library'

group = 'com.mobile.android'
def artifact_Id = "splashscreen-lottie"
version = '1.0.0'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    provided "com.android.support:appcompat-v7:$rootProject.ext.appcompat_v7Version"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/aar/${project.name}-debug.aar"
//            artifact sourcesJar
            artifactId artifact_Id

//            pom.withXml {
//                def dependenciesNode
//                def providedCompileDependencies = configurations.providedCompile.allDependencies
//                configurations.compile.allDependencies.each {
//                    if(it.group && it.name && it.version && !isInProvidedCompile(providedCompileDependencies, it)) {
//                        if(!dependenciesNode) {
//                            dependenciesNode = asNode().appendNode('dependencies')
//                        }
//
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
//            }
        }
    }
}

boolean isInProvidedCompile(providedCompileDependencies, compileDependency) {
    boolean isInProvidedCompile = false
    providedCompileDependencies.each {
        if(!isInProvidedCompile && it.group == compileDependency.group &&
                it.name == compileDependency.name) {
            isInProvidedCompile = true
        }
    }
    return isInProvidedCompile
}